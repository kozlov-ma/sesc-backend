// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/authuser"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/user"
)

// AuthUserCreate is the builder for creating a AuthUser entity.
type AuthUserCreate struct {
	config
	mutation *AuthUserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (auc *AuthUserCreate) SetUsername(s string) *AuthUserCreate {
	auc.mutation.SetUsername(s)
	return auc
}

// SetPassword sets the "password" field.
func (auc *AuthUserCreate) SetPassword(s string) *AuthUserCreate {
	auc.mutation.SetPassword(s)
	return auc
}

// SetAuthID sets the "auth_id" field.
func (auc *AuthUserCreate) SetAuthID(u uuid.UUID) *AuthUserCreate {
	auc.mutation.SetAuthID(u)
	return auc
}

// SetUserID sets the "user_id" field.
func (auc *AuthUserCreate) SetUserID(u uuid.UUID) *AuthUserCreate {
	auc.mutation.SetUserID(u)
	return auc
}

// SetUser sets the "user" edge to the User entity.
func (auc *AuthUserCreate) SetUser(u *User) *AuthUserCreate {
	return auc.SetUserID(u.ID)
}

// Mutation returns the AuthUserMutation object of the builder.
func (auc *AuthUserCreate) Mutation() *AuthUserMutation {
	return auc.mutation
}

// Save creates the AuthUser in the database.
func (auc *AuthUserCreate) Save(ctx context.Context) (*AuthUser, error) {
	return withHooks(ctx, auc.sqlSave, auc.mutation, auc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (auc *AuthUserCreate) SaveX(ctx context.Context) *AuthUser {
	v, err := auc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auc *AuthUserCreate) Exec(ctx context.Context) error {
	_, err := auc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auc *AuthUserCreate) ExecX(ctx context.Context) {
	if err := auc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auc *AuthUserCreate) check() error {
	if _, ok := auc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "AuthUser.username"`)}
	}
	if v, ok := auc.mutation.Username(); ok {
		if err := authuser.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "AuthUser.username": %w`, err)}
		}
	}
	if _, ok := auc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "AuthUser.password"`)}
	}
	if v, ok := auc.mutation.Password(); ok {
		if err := authuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "AuthUser.password": %w`, err)}
		}
	}
	if _, ok := auc.mutation.AuthID(); !ok {
		return &ValidationError{Name: "auth_id", err: errors.New(`ent: missing required field "AuthUser.auth_id"`)}
	}
	if _, ok := auc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AuthUser.user_id"`)}
	}
	if len(auc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "AuthUser.user"`)}
	}
	return nil
}

func (auc *AuthUserCreate) sqlSave(ctx context.Context) (*AuthUser, error) {
	if err := auc.check(); err != nil {
		return nil, err
	}
	_node, _spec := auc.createSpec()
	if err := sqlgraph.CreateNode(ctx, auc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	auc.mutation.id = &_node.ID
	auc.mutation.done = true
	return _node, nil
}

func (auc *AuthUserCreate) createSpec() (*AuthUser, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthUser{config: auc.config}
		_spec = sqlgraph.NewCreateSpec(authuser.Table, sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeInt))
	)
	if value, ok := auc.mutation.Username(); ok {
		_spec.SetField(authuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := auc.mutation.Password(); ok {
		_spec.SetField(authuser.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := auc.mutation.AuthID(); ok {
		_spec.SetField(authuser.FieldAuthID, field.TypeUUID, value)
		_node.AuthID = value
	}
	if nodes := auc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authuser.UserTable,
			Columns: []string{authuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthUserCreateBulk is the builder for creating many AuthUser entities in bulk.
type AuthUserCreateBulk struct {
	config
	err      error
	builders []*AuthUserCreate
}

// Save creates the AuthUser entities in the database.
func (aucb *AuthUserCreateBulk) Save(ctx context.Context) ([]*AuthUser, error) {
	if aucb.err != nil {
		return nil, aucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aucb.builders))
	nodes := make([]*AuthUser, len(aucb.builders))
	mutators := make([]Mutator, len(aucb.builders))
	for i := range aucb.builders {
		func(i int, root context.Context) {
			builder := aucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aucb *AuthUserCreateBulk) SaveX(ctx context.Context) []*AuthUser {
	v, err := aucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aucb *AuthUserCreateBulk) Exec(ctx context.Context) error {
	_, err := aucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aucb *AuthUserCreateBulk) ExecX(ctx context.Context) {
	if err := aucb.Exec(ctx); err != nil {
		panic(err)
	}
}
