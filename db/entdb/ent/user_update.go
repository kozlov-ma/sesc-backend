// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/department"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/predicate"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// SetMiddleName sets the "middle_name" field.
func (uu *UserUpdate) SetMiddleName(s string) *UserUpdate {
	uu.mutation.SetMiddleName(s)
	return uu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMiddleName(s *string) *UserUpdate {
	if s != nil {
		uu.SetMiddleName(*s)
	}
	return uu
}

// SetPictureURL sets the "picture_url" field.
func (uu *UserUpdate) SetPictureURL(s string) *UserUpdate {
	uu.mutation.SetPictureURL(s)
	return uu
}

// SetNillablePictureURL sets the "picture_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePictureURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetPictureURL(*s)
	}
	return uu
}

// ClearPictureURL clears the value of the "picture_url" field.
func (uu *UserUpdate) ClearPictureURL() *UserUpdate {
	uu.mutation.ClearPictureURL()
	return uu
}

// SetSuspended sets the "suspended" field.
func (uu *UserUpdate) SetSuspended(b bool) *UserUpdate {
	uu.mutation.SetSuspended(b)
	return uu
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSuspended(b *bool) *UserUpdate {
	if b != nil {
		uu.SetSuspended(*b)
	}
	return uu
}

// SetDepartmentID sets the "department_id" field.
func (uu *UserUpdate) SetDepartmentID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetDepartmentID(u)
	return uu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDepartmentID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetDepartmentID(*u)
	}
	return uu
}

// ClearDepartmentID clears the value of the "department_id" field.
func (uu *UserUpdate) ClearDepartmentID() *UserUpdate {
	uu.mutation.ClearDepartmentID()
	return uu
}

// SetRoleID sets the "role_id" field.
func (uu *UserUpdate) SetRoleID(i int32) *UserUpdate {
	uu.mutation.ResetRoleID()
	uu.mutation.SetRoleID(i)
	return uu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRoleID(i *int32) *UserUpdate {
	if i != nil {
		uu.SetRoleID(*i)
	}
	return uu
}

// AddRoleID adds i to the "role_id" field.
func (uu *UserUpdate) AddRoleID(i int32) *UserUpdate {
	uu.mutation.AddRoleID(i)
	return uu
}

// SetDepartment sets the "department" edge to the Department entity.
func (uu *UserUpdate) SetDepartment(d *Department) *UserUpdate {
	return uu.SetDepartmentID(d.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (uu *UserUpdate) ClearDepartment() *UserUpdate {
	uu.mutation.ClearDepartment()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uu.mutation.MiddleName(); ok {
		_spec.SetField(user.FieldMiddleName, field.TypeString, value)
	}
	if value, ok := uu.mutation.PictureURL(); ok {
		_spec.SetField(user.FieldPictureURL, field.TypeString, value)
	}
	if uu.mutation.PictureURLCleared() {
		_spec.ClearField(user.FieldPictureURL, field.TypeString)
	}
	if value, ok := uu.mutation.Suspended(); ok {
		_spec.SetField(user.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := uu.mutation.RoleID(); ok {
		_spec.SetField(user.FieldRoleID, field.TypeInt32, value)
	}
	if value, ok := uu.mutation.AddedRoleID(); ok {
		_spec.AddField(user.FieldRoleID, field.TypeInt32, value)
	}
	if uu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.DepartmentTable,
			Columns: []string{user.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.DepartmentTable,
			Columns: []string{user.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// SetMiddleName sets the "middle_name" field.
func (uuo *UserUpdateOne) SetMiddleName(s string) *UserUpdateOne {
	uuo.mutation.SetMiddleName(s)
	return uuo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMiddleName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMiddleName(*s)
	}
	return uuo
}

// SetPictureURL sets the "picture_url" field.
func (uuo *UserUpdateOne) SetPictureURL(s string) *UserUpdateOne {
	uuo.mutation.SetPictureURL(s)
	return uuo
}

// SetNillablePictureURL sets the "picture_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePictureURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPictureURL(*s)
	}
	return uuo
}

// ClearPictureURL clears the value of the "picture_url" field.
func (uuo *UserUpdateOne) ClearPictureURL() *UserUpdateOne {
	uuo.mutation.ClearPictureURL()
	return uuo
}

// SetSuspended sets the "suspended" field.
func (uuo *UserUpdateOne) SetSuspended(b bool) *UserUpdateOne {
	uuo.mutation.SetSuspended(b)
	return uuo
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSuspended(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetSuspended(*b)
	}
	return uuo
}

// SetDepartmentID sets the "department_id" field.
func (uuo *UserUpdateOne) SetDepartmentID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetDepartmentID(u)
	return uuo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDepartmentID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetDepartmentID(*u)
	}
	return uuo
}

// ClearDepartmentID clears the value of the "department_id" field.
func (uuo *UserUpdateOne) ClearDepartmentID() *UserUpdateOne {
	uuo.mutation.ClearDepartmentID()
	return uuo
}

// SetRoleID sets the "role_id" field.
func (uuo *UserUpdateOne) SetRoleID(i int32) *UserUpdateOne {
	uuo.mutation.ResetRoleID()
	uuo.mutation.SetRoleID(i)
	return uuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoleID(i *int32) *UserUpdateOne {
	if i != nil {
		uuo.SetRoleID(*i)
	}
	return uuo
}

// AddRoleID adds i to the "role_id" field.
func (uuo *UserUpdateOne) AddRoleID(i int32) *UserUpdateOne {
	uuo.mutation.AddRoleID(i)
	return uuo
}

// SetDepartment sets the "department" edge to the Department entity.
func (uuo *UserUpdateOne) SetDepartment(d *Department) *UserUpdateOne {
	return uuo.SetDepartmentID(d.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (uuo *UserUpdateOne) ClearDepartment() *UserUpdateOne {
	uuo.mutation.ClearDepartment()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.MiddleName(); ok {
		_spec.SetField(user.FieldMiddleName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PictureURL(); ok {
		_spec.SetField(user.FieldPictureURL, field.TypeString, value)
	}
	if uuo.mutation.PictureURLCleared() {
		_spec.ClearField(user.FieldPictureURL, field.TypeString)
	}
	if value, ok := uuo.mutation.Suspended(); ok {
		_spec.SetField(user.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.RoleID(); ok {
		_spec.SetField(user.FieldRoleID, field.TypeInt32, value)
	}
	if value, ok := uuo.mutation.AddedRoleID(); ok {
		_spec.AddField(user.FieldRoleID, field.TypeInt32, value)
	}
	if uuo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.DepartmentTable,
			Columns: []string{user.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.DepartmentTable,
			Columns: []string{user.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
