// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// MiddleName applies equality check predicate on the "middle_name" field. It's identical to MiddleNameEQ.
func MiddleName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMiddleName, v))
}

// PictureURL applies equality check predicate on the "picture_url" field. It's identical to PictureURLEQ.
func PictureURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPictureURL, v))
}

// Suspended applies equality check predicate on the "suspended" field. It's identical to SuspendedEQ.
func Suspended(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSuspended, v))
}

// DepartmentID applies equality check predicate on the "department_id" field. It's identical to DepartmentIDEQ.
func DepartmentID(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDepartmentID, v))
}

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRoleID, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastName, v))
}

// MiddleNameEQ applies the EQ predicate on the "middle_name" field.
func MiddleNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMiddleName, v))
}

// MiddleNameNEQ applies the NEQ predicate on the "middle_name" field.
func MiddleNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMiddleName, v))
}

// MiddleNameIn applies the In predicate on the "middle_name" field.
func MiddleNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldMiddleName, vs...))
}

// MiddleNameNotIn applies the NotIn predicate on the "middle_name" field.
func MiddleNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMiddleName, vs...))
}

// MiddleNameGT applies the GT predicate on the "middle_name" field.
func MiddleNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldMiddleName, v))
}

// MiddleNameGTE applies the GTE predicate on the "middle_name" field.
func MiddleNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldMiddleName, v))
}

// MiddleNameLT applies the LT predicate on the "middle_name" field.
func MiddleNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldMiddleName, v))
}

// MiddleNameLTE applies the LTE predicate on the "middle_name" field.
func MiddleNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldMiddleName, v))
}

// MiddleNameContains applies the Contains predicate on the "middle_name" field.
func MiddleNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldMiddleName, v))
}

// MiddleNameHasPrefix applies the HasPrefix predicate on the "middle_name" field.
func MiddleNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldMiddleName, v))
}

// MiddleNameHasSuffix applies the HasSuffix predicate on the "middle_name" field.
func MiddleNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldMiddleName, v))
}

// MiddleNameEqualFold applies the EqualFold predicate on the "middle_name" field.
func MiddleNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldMiddleName, v))
}

// MiddleNameContainsFold applies the ContainsFold predicate on the "middle_name" field.
func MiddleNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldMiddleName, v))
}

// PictureURLEQ applies the EQ predicate on the "picture_url" field.
func PictureURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPictureURL, v))
}

// PictureURLNEQ applies the NEQ predicate on the "picture_url" field.
func PictureURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPictureURL, v))
}

// PictureURLIn applies the In predicate on the "picture_url" field.
func PictureURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPictureURL, vs...))
}

// PictureURLNotIn applies the NotIn predicate on the "picture_url" field.
func PictureURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPictureURL, vs...))
}

// PictureURLGT applies the GT predicate on the "picture_url" field.
func PictureURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPictureURL, v))
}

// PictureURLGTE applies the GTE predicate on the "picture_url" field.
func PictureURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPictureURL, v))
}

// PictureURLLT applies the LT predicate on the "picture_url" field.
func PictureURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPictureURL, v))
}

// PictureURLLTE applies the LTE predicate on the "picture_url" field.
func PictureURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPictureURL, v))
}

// PictureURLContains applies the Contains predicate on the "picture_url" field.
func PictureURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPictureURL, v))
}

// PictureURLHasPrefix applies the HasPrefix predicate on the "picture_url" field.
func PictureURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPictureURL, v))
}

// PictureURLHasSuffix applies the HasSuffix predicate on the "picture_url" field.
func PictureURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPictureURL, v))
}

// PictureURLIsNil applies the IsNil predicate on the "picture_url" field.
func PictureURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPictureURL))
}

// PictureURLNotNil applies the NotNil predicate on the "picture_url" field.
func PictureURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPictureURL))
}

// PictureURLEqualFold applies the EqualFold predicate on the "picture_url" field.
func PictureURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPictureURL, v))
}

// PictureURLContainsFold applies the ContainsFold predicate on the "picture_url" field.
func PictureURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPictureURL, v))
}

// SuspendedEQ applies the EQ predicate on the "suspended" field.
func SuspendedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSuspended, v))
}

// SuspendedNEQ applies the NEQ predicate on the "suspended" field.
func SuspendedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSuspended, v))
}

// DepartmentIDEQ applies the EQ predicate on the "department_id" field.
func DepartmentIDEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDepartmentID, v))
}

// DepartmentIDNEQ applies the NEQ predicate on the "department_id" field.
func DepartmentIDNEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDepartmentID, v))
}

// DepartmentIDIn applies the In predicate on the "department_id" field.
func DepartmentIDIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldDepartmentID, vs...))
}

// DepartmentIDNotIn applies the NotIn predicate on the "department_id" field.
func DepartmentIDNotIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDepartmentID, vs...))
}

// DepartmentIDIsNil applies the IsNil predicate on the "department_id" field.
func DepartmentIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDepartmentID))
}

// DepartmentIDNotNil applies the NotNil predicate on the "department_id" field.
func DepartmentIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDepartmentID))
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRoleID, v))
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v int32) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRoleID, v))
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldIn(FieldRoleID, vs...))
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRoleID, vs...))
}

// RoleIDGT applies the GT predicate on the "role_id" field.
func RoleIDGT(v int32) predicate.User {
	return predicate.User(sql.FieldGT(FieldRoleID, v))
}

// RoleIDGTE applies the GTE predicate on the "role_id" field.
func RoleIDGTE(v int32) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRoleID, v))
}

// RoleIDLT applies the LT predicate on the "role_id" field.
func RoleIDLT(v int32) predicate.User {
	return predicate.User(sql.FieldLT(FieldRoleID, v))
}

// RoleIDLTE applies the LTE predicate on the "role_id" field.
func RoleIDLTE(v int32) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRoleID, v))
}

// HasDepartment applies the HasEdge predicate on the "department" edge.
func HasDepartment() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentWith applies the HasEdge predicate on the "department" edge with a given conditions (other predicates).
func HasDepartmentWith(preds ...predicate.Department) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newDepartmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuth applies the HasEdge predicate on the "auth" edge.
func HasAuth() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AuthTable, AuthColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthWith applies the HasEdge predicate on the "auth" edge with a given conditions (other predicates).
func HasAuthWith(preds ...predicate.AuthUser) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAuthStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
