// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	uuid "github.com/gofrs/uuid/v5"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldPictureURL holds the string denoting the picture_url field in the database.
	FieldPictureURL = "picture_url"
	// FieldSuspended holds the string denoting the suspended field in the database.
	FieldSuspended = "suspended"
	// FieldDepartmentID holds the string denoting the department_id field in the database.
	FieldDepartmentID = "department_id"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldSubdivision holds the string denoting the subdivision field in the database.
	FieldSubdivision = "subdivision"
	// FieldJobTitle holds the string denoting the job_title field in the database.
	FieldJobTitle = "job_title"
	// FieldEmploymentRate holds the string denoting the employment_rate field in the database.
	FieldEmploymentRate = "employment_rate"
	// FieldAcademicDegree holds the string denoting the academic_degree field in the database.
	FieldAcademicDegree = "academic_degree"
	// FieldAcademicTitle holds the string denoting the academic_title field in the database.
	FieldAcademicTitle = "academic_title"
	// FieldHonors holds the string denoting the honors field in the database.
	FieldHonors = "honors"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldDateOfEmployment holds the string denoting the date_of_employment field in the database.
	FieldDateOfEmployment = "date_of_employment"
	// FieldUnemploymentDate holds the string denoting the unemployment_date field in the database.
	FieldUnemploymentDate = "unemployment_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeAuth holds the string denoting the auth edge name in mutations.
	EdgeAuth = "auth"
	// Table holds the table name of the user in the database.
	Table = "users"
	// DepartmentTable is the table that holds the department relation/edge.
	DepartmentTable = "users"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "department_id"
	// AuthTable is the table that holds the auth relation/edge.
	AuthTable = "auth_users"
	// AuthInverseTable is the table name for the AuthUser entity.
	// It exists in this package in order to avoid circular dependency with the "authuser" package.
	AuthInverseTable = "auth_users"
	// AuthColumn is the table column denoting the auth relation/edge.
	AuthColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFirstName,
	FieldLastName,
	FieldMiddleName,
	FieldPictureURL,
	FieldSuspended,
	FieldDepartmentID,
	FieldRoleID,
	FieldSubdivision,
	FieldJobTitle,
	FieldEmploymentRate,
	FieldAcademicDegree,
	FieldAcademicTitle,
	FieldHonors,
	FieldCategory,
	FieldDateOfEmployment,
	FieldUnemploymentDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/kozlov-ma/sesc-backend/db/entdb/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultMiddleName holds the default value on creation for the "middle_name" field.
	DefaultMiddleName string
	// DefaultSuspended holds the default value on creation for the "suspended" field.
	DefaultSuspended bool
	// DefaultEmploymentRate holds the default value on creation for the "employment_rate" field.
	DefaultEmploymentRate float64
	// DefaultAcademicDegree holds the default value on creation for the "academic_degree" field.
	DefaultAcademicDegree int
	// DefaultAcademicTitle holds the default value on creation for the "academic_title" field.
	DefaultAcademicTitle string
	// DefaultHonors holds the default value on creation for the "honors" field.
	DefaultHonors string
	// DefaultCategory holds the default value on creation for the "category" field.
	DefaultCategory string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByMiddleName orders the results by the middle_name field.
func ByMiddleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMiddleName, opts...).ToFunc()
}

// ByPictureURL orders the results by the picture_url field.
func ByPictureURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPictureURL, opts...).ToFunc()
}

// BySuspended orders the results by the suspended field.
func BySuspended(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspended, opts...).ToFunc()
}

// ByDepartmentID orders the results by the department_id field.
func ByDepartmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartmentID, opts...).ToFunc()
}

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// BySubdivision orders the results by the subdivision field.
func BySubdivision(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubdivision, opts...).ToFunc()
}

// ByJobTitle orders the results by the job_title field.
func ByJobTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobTitle, opts...).ToFunc()
}

// ByEmploymentRate orders the results by the employment_rate field.
func ByEmploymentRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmploymentRate, opts...).ToFunc()
}

// ByAcademicDegree orders the results by the academic_degree field.
func ByAcademicDegree(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcademicDegree, opts...).ToFunc()
}

// ByAcademicTitle orders the results by the academic_title field.
func ByAcademicTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcademicTitle, opts...).ToFunc()
}

// ByHonors orders the results by the honors field.
func ByHonors(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHonors, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByDateOfEmployment orders the results by the date_of_employment field.
func ByDateOfEmployment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOfEmployment, opts...).ToFunc()
}

// ByUnemploymentDate orders the results by the unemployment_date field.
func ByUnemploymentDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnemploymentDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDepartmentField orders the results by department field.
func ByDepartmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthField orders the results by auth field.
func ByAuthField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthStep(), sql.OrderByField(field, opts...))
	}
}
func newDepartmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
	)
}
func newAuthStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AuthTable, AuthColumn),
	)
}
