// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/authuser"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/user"
)

// AuthUser is the model entity for the AuthUser schema.
type AuthUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// AuthID holds the value of the "auth_id" field.
	AuthID uuid.UUID `json:"auth_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthUserQuery when eager-loading is set.
	Edges        AuthUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthUserEdges holds the relations/edges for other nodes in the graph.
type AuthUserEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthUserEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authuser.FieldID:
			values[i] = new(sql.NullInt64)
		case authuser.FieldUsername, authuser.FieldPassword:
			values[i] = new(sql.NullString)
		case authuser.FieldAuthID, authuser.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthUser fields.
func (au *AuthUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			au.ID = int(value.Int64)
		case authuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				au.Username = value.String
			}
		case authuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				au.Password = value.String
			}
		case authuser.FieldAuthID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field auth_id", values[i])
			} else if value != nil {
				au.AuthID = *value
			}
		case authuser.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				au.UserID = *value
			}
		default:
			au.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthUser.
// This includes values selected through modifiers, order, etc.
func (au *AuthUser) Value(name string) (ent.Value, error) {
	return au.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the AuthUser entity.
func (au *AuthUser) QueryUser() *UserQuery {
	return NewAuthUserClient(au.config).QueryUser(au)
}

// Update returns a builder for updating this AuthUser.
// Note that you need to call AuthUser.Unwrap() before calling this method if this AuthUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AuthUser) Update() *AuthUserUpdateOne {
	return NewAuthUserClient(au.config).UpdateOne(au)
}

// Unwrap unwraps the AuthUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AuthUser) Unwrap() *AuthUser {
	_tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthUser is not a transactional entity")
	}
	au.config.driver = _tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AuthUser) String() string {
	var builder strings.Builder
	builder.WriteString("AuthUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", au.ID))
	builder.WriteString("username=")
	builder.WriteString(au.Username)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("auth_id=")
	builder.WriteString(fmt.Sprintf("%v", au.AuthID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", au.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// AuthUsers is a parsable slice of AuthUser.
type AuthUsers []*AuthUser
