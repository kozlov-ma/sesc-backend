// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/authuser"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/department"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// MiddleName holds the value of the "middle_name" field.
	MiddleName string `json:"middle_name,omitempty"`
	// PictureURL holds the value of the "picture_url" field.
	PictureURL string `json:"picture_url,omitempty"`
	// Suspended holds the value of the "suspended" field.
	Suspended bool `json:"suspended,omitempty"`
	// DepartmentID holds the value of the "department_id" field.
	DepartmentID *uuid.UUID `json:"department_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID int32 `json:"role_id,omitempty"`
	// Subdivision holds the value of the "subdivision" field.
	Subdivision string `json:"subdivision,omitempty"`
	// JobTitle holds the value of the "job_title" field.
	JobTitle string `json:"job_title,omitempty"`
	// EmploymentRate holds the value of the "employment_rate" field.
	EmploymentRate float64 `json:"employment_rate,omitempty"`
	// AcademicDegree holds the value of the "academic_degree" field.
	AcademicDegree int `json:"academic_degree,omitempty"`
	// PersonnelCategory holds the value of the "personnel_category" field.
	PersonnelCategory int `json:"personnel_category,omitempty"`
	// EmploymentType holds the value of the "employment_type" field.
	EmploymentType int `json:"employment_type,omitempty"`
	// AcademicTitle holds the value of the "academic_title" field.
	AcademicTitle string `json:"academic_title,omitempty"`
	// Honors holds the value of the "honors" field.
	Honors string `json:"honors,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// DateOfEmployment holds the value of the "date_of_employment" field.
	DateOfEmployment time.Time `json:"date_of_employment,omitempty"`
	// UnemploymentDate holds the value of the "unemployment_date" field.
	UnemploymentDate time.Time `json:"unemployment_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// Auth holds the value of the auth edge.
	Auth *AuthUser `json:"auth,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) DepartmentOrErr() (*Department, error) {
	if e.Department != nil {
		return e.Department, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: department.Label}
	}
	return nil, &NotLoadedError{edge: "department"}
}

// AuthOrErr returns the Auth value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) AuthOrErr() (*AuthUser, error) {
	if e.Auth != nil {
		return e.Auth, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: authuser.Label}
	}
	return nil, &NotLoadedError{edge: "auth"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldDepartmentID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case user.FieldSuspended:
			values[i] = new(sql.NullBool)
		case user.FieldEmploymentRate:
			values[i] = new(sql.NullFloat64)
		case user.FieldRoleID, user.FieldAcademicDegree, user.FieldPersonnelCategory, user.FieldEmploymentType:
			values[i] = new(sql.NullInt64)
		case user.FieldFirstName, user.FieldLastName, user.FieldMiddleName, user.FieldPictureURL, user.FieldSubdivision, user.FieldJobTitle, user.FieldAcademicTitle, user.FieldHonors, user.FieldCategory:
			values[i] = new(sql.NullString)
		case user.FieldDateOfEmployment, user.FieldUnemploymentDate, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field middle_name", values[i])
			} else if value.Valid {
				u.MiddleName = value.String
			}
		case user.FieldPictureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture_url", values[i])
			} else if value.Valid {
				u.PictureURL = value.String
			}
		case user.FieldSuspended:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field suspended", values[i])
			} else if value.Valid {
				u.Suspended = value.Bool
			}
		case user.FieldDepartmentID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field department_id", values[i])
			} else if value.Valid {
				u.DepartmentID = new(uuid.UUID)
				*u.DepartmentID = *value.S.(*uuid.UUID)
			}
		case user.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				u.RoleID = int32(value.Int64)
			}
		case user.FieldSubdivision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subdivision", values[i])
			} else if value.Valid {
				u.Subdivision = value.String
			}
		case user.FieldJobTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_title", values[i])
			} else if value.Valid {
				u.JobTitle = value.String
			}
		case user.FieldEmploymentRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field employment_rate", values[i])
			} else if value.Valid {
				u.EmploymentRate = value.Float64
			}
		case user.FieldAcademicDegree:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field academic_degree", values[i])
			} else if value.Valid {
				u.AcademicDegree = int(value.Int64)
			}
		case user.FieldPersonnelCategory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field personnel_category", values[i])
			} else if value.Valid {
				u.PersonnelCategory = int(value.Int64)
			}
		case user.FieldEmploymentType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employment_type", values[i])
			} else if value.Valid {
				u.EmploymentType = int(value.Int64)
			}
		case user.FieldAcademicTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field academic_title", values[i])
			} else if value.Valid {
				u.AcademicTitle = value.String
			}
		case user.FieldHonors:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field honors", values[i])
			} else if value.Valid {
				u.Honors = value.String
			}
		case user.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				u.Category = value.String
			}
		case user.FieldDateOfEmployment:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_employment", values[i])
			} else if value.Valid {
				u.DateOfEmployment = value.Time
			}
		case user.FieldUnemploymentDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field unemployment_date", values[i])
			} else if value.Valid {
				u.UnemploymentDate = value.Time
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryDepartment queries the "department" edge of the User entity.
func (u *User) QueryDepartment() *DepartmentQuery {
	return NewUserClient(u.config).QueryDepartment(u)
}

// QueryAuth queries the "auth" edge of the User entity.
func (u *User) QueryAuth() *AuthUserQuery {
	return NewUserClient(u.config).QueryAuth(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("middle_name=")
	builder.WriteString(u.MiddleName)
	builder.WriteString(", ")
	builder.WriteString("picture_url=")
	builder.WriteString(u.PictureURL)
	builder.WriteString(", ")
	builder.WriteString("suspended=")
	builder.WriteString(fmt.Sprintf("%v", u.Suspended))
	builder.WriteString(", ")
	if v := u.DepartmentID; v != nil {
		builder.WriteString("department_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", u.RoleID))
	builder.WriteString(", ")
	builder.WriteString("subdivision=")
	builder.WriteString(u.Subdivision)
	builder.WriteString(", ")
	builder.WriteString("job_title=")
	builder.WriteString(u.JobTitle)
	builder.WriteString(", ")
	builder.WriteString("employment_rate=")
	builder.WriteString(fmt.Sprintf("%v", u.EmploymentRate))
	builder.WriteString(", ")
	builder.WriteString("academic_degree=")
	builder.WriteString(fmt.Sprintf("%v", u.AcademicDegree))
	builder.WriteString(", ")
	builder.WriteString("personnel_category=")
	builder.WriteString(fmt.Sprintf("%v", u.PersonnelCategory))
	builder.WriteString(", ")
	builder.WriteString("employment_type=")
	builder.WriteString(fmt.Sprintf("%v", u.EmploymentType))
	builder.WriteString(", ")
	builder.WriteString("academic_title=")
	builder.WriteString(u.AcademicTitle)
	builder.WriteString(", ")
	builder.WriteString("honors=")
	builder.WriteString(u.Honors)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(u.Category)
	builder.WriteString(", ")
	builder.WriteString("date_of_employment=")
	builder.WriteString(u.DateOfEmployment.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("unemployment_date=")
	builder.WriteString(u.UnemploymentDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
