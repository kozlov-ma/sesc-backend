// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/authuser"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/department"
	"github.com/kozlov-ma/sesc-backend/db/entdb/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetFirstName sets the "first_name" field.
func (uc *UserCreate) SetFirstName(s string) *UserCreate {
	uc.mutation.SetFirstName(s)
	return uc
}

// SetLastName sets the "last_name" field.
func (uc *UserCreate) SetLastName(s string) *UserCreate {
	uc.mutation.SetLastName(s)
	return uc
}

// SetMiddleName sets the "middle_name" field.
func (uc *UserCreate) SetMiddleName(s string) *UserCreate {
	uc.mutation.SetMiddleName(s)
	return uc
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableMiddleName(s *string) *UserCreate {
	if s != nil {
		uc.SetMiddleName(*s)
	}
	return uc
}

// SetPictureURL sets the "picture_url" field.
func (uc *UserCreate) SetPictureURL(s string) *UserCreate {
	uc.mutation.SetPictureURL(s)
	return uc
}

// SetNillablePictureURL sets the "picture_url" field if the given value is not nil.
func (uc *UserCreate) SetNillablePictureURL(s *string) *UserCreate {
	if s != nil {
		uc.SetPictureURL(*s)
	}
	return uc
}

// SetSuspended sets the "suspended" field.
func (uc *UserCreate) SetSuspended(b bool) *UserCreate {
	uc.mutation.SetSuspended(b)
	return uc
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (uc *UserCreate) SetNillableSuspended(b *bool) *UserCreate {
	if b != nil {
		uc.SetSuspended(*b)
	}
	return uc
}

// SetDepartmentID sets the "department_id" field.
func (uc *UserCreate) SetDepartmentID(u uuid.UUID) *UserCreate {
	uc.mutation.SetDepartmentID(u)
	return uc
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableDepartmentID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetDepartmentID(*u)
	}
	return uc
}

// SetRoleID sets the "role_id" field.
func (uc *UserCreate) SetRoleID(i int32) *UserCreate {
	uc.mutation.SetRoleID(i)
	return uc
}

// SetSubdivision sets the "subdivision" field.
func (uc *UserCreate) SetSubdivision(s string) *UserCreate {
	uc.mutation.SetSubdivision(s)
	return uc
}

// SetJobTitle sets the "job_title" field.
func (uc *UserCreate) SetJobTitle(s string) *UserCreate {
	uc.mutation.SetJobTitle(s)
	return uc
}

// SetEmploymentRate sets the "employment_rate" field.
func (uc *UserCreate) SetEmploymentRate(f float64) *UserCreate {
	uc.mutation.SetEmploymentRate(f)
	return uc
}

// SetNillableEmploymentRate sets the "employment_rate" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmploymentRate(f *float64) *UserCreate {
	if f != nil {
		uc.SetEmploymentRate(*f)
	}
	return uc
}

// SetAcademicDegree sets the "academic_degree" field.
func (uc *UserCreate) SetAcademicDegree(i int) *UserCreate {
	uc.mutation.SetAcademicDegree(i)
	return uc
}

// SetNillableAcademicDegree sets the "academic_degree" field if the given value is not nil.
func (uc *UserCreate) SetNillableAcademicDegree(i *int) *UserCreate {
	if i != nil {
		uc.SetAcademicDegree(*i)
	}
	return uc
}

// SetAcademicTitle sets the "academic_title" field.
func (uc *UserCreate) SetAcademicTitle(s string) *UserCreate {
	uc.mutation.SetAcademicTitle(s)
	return uc
}

// SetNillableAcademicTitle sets the "academic_title" field if the given value is not nil.
func (uc *UserCreate) SetNillableAcademicTitle(s *string) *UserCreate {
	if s != nil {
		uc.SetAcademicTitle(*s)
	}
	return uc
}

// SetHonors sets the "honors" field.
func (uc *UserCreate) SetHonors(s string) *UserCreate {
	uc.mutation.SetHonors(s)
	return uc
}

// SetNillableHonors sets the "honors" field if the given value is not nil.
func (uc *UserCreate) SetNillableHonors(s *string) *UserCreate {
	if s != nil {
		uc.SetHonors(*s)
	}
	return uc
}

// SetCategory sets the "category" field.
func (uc *UserCreate) SetCategory(s string) *UserCreate {
	uc.mutation.SetCategory(s)
	return uc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (uc *UserCreate) SetNillableCategory(s *string) *UserCreate {
	if s != nil {
		uc.SetCategory(*s)
	}
	return uc
}

// SetDateOfEmployment sets the "date_of_employment" field.
func (uc *UserCreate) SetDateOfEmployment(t time.Time) *UserCreate {
	uc.mutation.SetDateOfEmployment(t)
	return uc
}

// SetUnemploymentDate sets the "unemployment_date" field.
func (uc *UserCreate) SetUnemploymentDate(t time.Time) *UserCreate {
	uc.mutation.SetUnemploymentDate(t)
	return uc
}

// SetNillableUnemploymentDate sets the "unemployment_date" field if the given value is not nil.
func (uc *UserCreate) SetNillableUnemploymentDate(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUnemploymentDate(*t)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uuid.UUID) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// SetDepartment sets the "department" edge to the Department entity.
func (uc *UserCreate) SetDepartment(d *Department) *UserCreate {
	return uc.SetDepartmentID(d.ID)
}

// SetAuthID sets the "auth" edge to the AuthUser entity by ID.
func (uc *UserCreate) SetAuthID(id int) *UserCreate {
	uc.mutation.SetAuthID(id)
	return uc
}

// SetNillableAuthID sets the "auth" edge to the AuthUser entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableAuthID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetAuthID(*id)
	}
	return uc
}

// SetAuth sets the "auth" edge to the AuthUser entity.
func (uc *UserCreate) SetAuth(a *AuthUser) *UserCreate {
	return uc.SetAuthID(a.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if err := uc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() error {
	if _, ok := uc.mutation.MiddleName(); !ok {
		v := user.DefaultMiddleName
		uc.mutation.SetMiddleName(v)
	}
	if _, ok := uc.mutation.Suspended(); !ok {
		v := user.DefaultSuspended
		uc.mutation.SetSuspended(v)
	}
	if _, ok := uc.mutation.EmploymentRate(); !ok {
		v := user.DefaultEmploymentRate
		uc.mutation.SetEmploymentRate(v)
	}
	if _, ok := uc.mutation.AcademicDegree(); !ok {
		v := user.DefaultAcademicDegree
		uc.mutation.SetAcademicDegree(v)
	}
	if _, ok := uc.mutation.AcademicTitle(); !ok {
		v := user.DefaultAcademicTitle
		uc.mutation.SetAcademicTitle(v)
	}
	if _, ok := uc.mutation.Honors(); !ok {
		v := user.DefaultHonors
		uc.mutation.SetHonors(v)
	}
	if _, ok := uc.mutation.Category(); !ok {
		v := user.DefaultCategory
		uc.mutation.SetCategory(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		if user.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		if user.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		if user.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultID (forgotten import ent/runtime?)")
		}
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "User.first_name"`)}
	}
	if _, ok := uc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "User.last_name"`)}
	}
	if _, ok := uc.mutation.MiddleName(); !ok {
		return &ValidationError{Name: "middle_name", err: errors.New(`ent: missing required field "User.middle_name"`)}
	}
	if _, ok := uc.mutation.Suspended(); !ok {
		return &ValidationError{Name: "suspended", err: errors.New(`ent: missing required field "User.suspended"`)}
	}
	if _, ok := uc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "User.role_id"`)}
	}
	if _, ok := uc.mutation.Subdivision(); !ok {
		return &ValidationError{Name: "subdivision", err: errors.New(`ent: missing required field "User.subdivision"`)}
	}
	if _, ok := uc.mutation.JobTitle(); !ok {
		return &ValidationError{Name: "job_title", err: errors.New(`ent: missing required field "User.job_title"`)}
	}
	if _, ok := uc.mutation.EmploymentRate(); !ok {
		return &ValidationError{Name: "employment_rate", err: errors.New(`ent: missing required field "User.employment_rate"`)}
	}
	if _, ok := uc.mutation.AcademicDegree(); !ok {
		return &ValidationError{Name: "academic_degree", err: errors.New(`ent: missing required field "User.academic_degree"`)}
	}
	if _, ok := uc.mutation.AcademicTitle(); !ok {
		return &ValidationError{Name: "academic_title", err: errors.New(`ent: missing required field "User.academic_title"`)}
	}
	if _, ok := uc.mutation.Honors(); !ok {
		return &ValidationError{Name: "honors", err: errors.New(`ent: missing required field "User.honors"`)}
	}
	if _, ok := uc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "User.category"`)}
	}
	if _, ok := uc.mutation.DateOfEmployment(); !ok {
		return &ValidationError{Name: "date_of_employment", err: errors.New(`ent: missing required field "User.date_of_employment"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := uc.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := uc.mutation.MiddleName(); ok {
		_spec.SetField(user.FieldMiddleName, field.TypeString, value)
		_node.MiddleName = value
	}
	if value, ok := uc.mutation.PictureURL(); ok {
		_spec.SetField(user.FieldPictureURL, field.TypeString, value)
		_node.PictureURL = value
	}
	if value, ok := uc.mutation.Suspended(); ok {
		_spec.SetField(user.FieldSuspended, field.TypeBool, value)
		_node.Suspended = value
	}
	if value, ok := uc.mutation.RoleID(); ok {
		_spec.SetField(user.FieldRoleID, field.TypeInt32, value)
		_node.RoleID = value
	}
	if value, ok := uc.mutation.Subdivision(); ok {
		_spec.SetField(user.FieldSubdivision, field.TypeString, value)
		_node.Subdivision = value
	}
	if value, ok := uc.mutation.JobTitle(); ok {
		_spec.SetField(user.FieldJobTitle, field.TypeString, value)
		_node.JobTitle = value
	}
	if value, ok := uc.mutation.EmploymentRate(); ok {
		_spec.SetField(user.FieldEmploymentRate, field.TypeFloat64, value)
		_node.EmploymentRate = value
	}
	if value, ok := uc.mutation.AcademicDegree(); ok {
		_spec.SetField(user.FieldAcademicDegree, field.TypeInt, value)
		_node.AcademicDegree = value
	}
	if value, ok := uc.mutation.AcademicTitle(); ok {
		_spec.SetField(user.FieldAcademicTitle, field.TypeString, value)
		_node.AcademicTitle = value
	}
	if value, ok := uc.mutation.Honors(); ok {
		_spec.SetField(user.FieldHonors, field.TypeString, value)
		_node.Honors = value
	}
	if value, ok := uc.mutation.Category(); ok {
		_spec.SetField(user.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := uc.mutation.DateOfEmployment(); ok {
		_spec.SetField(user.FieldDateOfEmployment, field.TypeTime, value)
		_node.DateOfEmployment = value
	}
	if value, ok := uc.mutation.UnemploymentDate(); ok {
		_spec.SetField(user.FieldUnemploymentDate, field.TypeTime, value)
		_node.UnemploymentDate = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.DepartmentTable,
			Columns: []string{user.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DepartmentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AuthTable,
			Columns: []string{user.AuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
