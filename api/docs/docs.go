// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/admin/login": {
            "post": {
                "description": "Verifies admin token and returns a JWT token with admin privileges",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Admin token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.AdminLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidRequestError"
                        }
                    },
                    "401": {
                        "description": "Invalid admin token or not recognized",
                        "schema": {
                            "$ref": "#/definitions/api.CredentialsNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        },
        "/auth/credentials/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves credentials for a user",
                "tags": [
                    "authentication"
                ],
                "summary": "Get user credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "User UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.CredentialsRequest"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidUUIDError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin role required",
                        "schema": {
                            "$ref": "#/definitions/api.ForbiddenError"
                        }
                    },
                    "404": {
                        "description": "User not found or does not exist",
                        "schema": {
                            "$ref": "#/definitions/api.CredentialsNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes credentials for a user",
                "tags": [
                    "authentication"
                ],
                "summary": "Delete user credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "User UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidUUIDError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin role required",
                        "schema": {
                            "$ref": "#/definitions/api.ForbiddenError"
                        }
                    },
                    "404": {
                        "description": "User credentials not found",
                        "schema": {
                            "$ref": "#/definitions/api.CredentialsNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Verifies user credentials and returns a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidRequestError"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or user does not exist",
                        "schema": {
                            "$ref": "#/definitions/api.CredentialsNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        },
        "/auth/validate": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates a JWT token and returns the identity information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Validate JWT token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.IdentityResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidTokenError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        },
        "/departments": {
            "get": {
                "description": "Retrieves list of all registered departments",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "List all departments",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.DepartmentsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new department with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Create a new department",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": "Department details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateDepartmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Department"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin role required",
                        "schema": {
                            "$ref": "#/definitions/api.ForbiddenError"
                        }
                    },
                    "409": {
                        "description": "Department with this name already exists",
                        "schema": {
                            "$ref": "#/definitions/api.DepartmentExistsError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        },
        "/departments/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing department with new details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Update department details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Department UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated department details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UpdateDepartmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Department"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin role required",
                        "schema": {
                            "$ref": "#/definitions/api.ForbiddenError"
                        }
                    },
                    "404": {
                        "description": "Department not found",
                        "schema": {
                            "$ref": "#/definitions/api.DepartmentNotFoundError"
                        }
                    },
                    "409": {
                        "description": "Department with this name already exists",
                        "schema": {
                            "$ref": "#/definitions/api.DepartmentExistsError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a department by its ID",
                "tags": [
                    "departments"
                ],
                "summary": "Delete a department",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Department UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidDepartmentIDError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin role required",
                        "schema": {
                            "$ref": "#/definitions/api.ForbiddenError"
                        }
                    },
                    "404": {
                        "description": "Department not found",
                        "schema": {
                            "$ref": "#/definitions/api.DepartmentNotFoundError"
                        }
                    },
                    "409": {
                        "description": "Cannot remove department, it still has some users",
                        "schema": {
                            "$ref": "#/definitions/api.CannotRemoveDepartmentError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        },
        "/dev/fakedata": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates departments, users, credentials, ...",
                "tags": [
                    "dev"
                ],
                "summary": "Create a lot of fake data (for testing and development purposes)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        },
        "/permissions": {
            "get": {
                "description": "Retrieves all available system permissions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "List all permissions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PermissionsResponse"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "description": "Retrieves all system roles with their permissions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "List all roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RolesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users registered in the system",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.UsersResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new user with specified role (non-teacher)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": "User details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid name specified",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidNameError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin role required",
                        "schema": {
                            "$ref": "#/definitions/api.ForbiddenError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns information about the current authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get current user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid token",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/api.UserNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "User UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidUUIDError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/api.UserNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Applies a partial update to the user identified by {id}. Only non-nil fields in the request are applied.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Partially update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "User UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.PatchUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid name",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidNameError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin role required",
                        "schema": {
                            "$ref": "#/definitions/api.ForbiddenError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/api.UserNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        },
        "/users/{id}/credentials": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assigns username/password credentials to an existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Register user credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "User UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "AuthID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid credentials format",
                        "schema": {
                            "$ref": "#/definitions/api.InvalidCredentialsError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.UnauthorizedError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin role required",
                        "schema": {
                            "$ref": "#/definitions/api.ForbiddenError"
                        }
                    },
                    "404": {
                        "description": "User does not exist",
                        "schema": {
                            "$ref": "#/definitions/api.UserNotFoundError"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/api.UserExistsError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AdminLoginRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "example": "admin-secret-token"
                }
            }
        },
        "api.CannotRemoveDepartmentError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "CANNOT_REMOVE_DEPARTMENT"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Cannot remove department, it still has some users"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Невозможно удалить кафедру, так как она содержит пользователей"
                }
            }
        },
        "api.CreateDepartmentRequest": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Math department"
                },
                "name": {
                    "type": "string",
                    "example": "Mathematics"
                }
            }
        },
        "api.CreateUserRequest": {
            "type": "object",
            "required": [
                "firstName",
                "lastName",
                "roleId"
            ],
            "properties": {
                "departmentId": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "firstName": {
                    "type": "string",
                    "example": "Anna"
                },
                "lastName": {
                    "type": "string",
                    "example": "Smirnova"
                },
                "middleName": {
                    "type": "string",
                    "example": "Olegovna"
                },
                "pictureUrl": {
                    "type": "string",
                    "example": "/images/users/ivan.jpg"
                },
                "roleId": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "api.CredentialsNotFoundError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "CREDENTIALS_NOT_FOUND"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "User credentials not found"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Учетные данные пользователя не найдены"
                }
            }
        },
        "api.CredentialsRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "secret123"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "api.Department": {
            "type": "object",
            "required": [
                "description",
                "id",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Math department"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "name": {
                    "type": "string",
                    "example": "Mathematics"
                }
            }
        },
        "api.DepartmentExistsError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "DEPARTMENT_EXISTS"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Department with this name already exists"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Кафедра с таким названием уже существует"
                }
            }
        },
        "api.DepartmentNotFoundError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "DEPARTMENT_NOT_FOUND"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Department not found"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Кафедра не найдена"
                }
            }
        },
        "api.DepartmentsResponse": {
            "type": "object",
            "required": [
                "departments"
            ],
            "properties": {
                "departments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Department"
                    }
                }
            }
        },
        "api.Error": {
            "type": "object",
            "required": [
                "code",
                "message",
                "ruMessage"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INVALID_REQUEST"
                },
                "details": {
                    "type": "string",
                    "example": "field X is required"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid request body"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Некорректный формат запроса"
                }
            }
        },
        "api.ForbiddenError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "FORBIDDEN"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Forbidden - insufficient permissions"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Доступ запрещен - недостаточно прав"
                }
            }
        },
        "api.IdentityResponse": {
            "type": "object",
            "required": [
                "id",
                "role"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "api.InvalidCredentialsError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INVALID_CREDENTIALS"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid credentials format"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Неверный формат учетных данных"
                }
            }
        },
        "api.InvalidDepartmentIDError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INVALID_DEPARTMENT_ID"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid department ID"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Некорректный идентификатор кафедры"
                }
            }
        },
        "api.InvalidNameError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INVALID_NAME"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid name specified"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Указано некорректное имя"
                }
            }
        },
        "api.InvalidRequestError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INVALID_REQUEST"
                },
                "details": {
                    "type": "string",
                    "example": "field X is required"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid request body"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Некорректный формат запроса"
                }
            }
        },
        "api.InvalidRoleError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INVALID_ROLE"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid role ID specified"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Указана некорректная роль"
                }
            }
        },
        "api.InvalidTokenError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INVALID_TOKEN"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid or expired token"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Недействительный или просроченный токен"
                }
            }
        },
        "api.InvalidUUIDError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INVALID_UUID"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid UUID format"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Некорректный формат UUID"
                }
            }
        },
        "api.PatchUserRequest": {
            "type": "object",
            "required": [
                "firstName",
                "lastName",
                "roleId",
                "suspended"
            ],
            "properties": {
                "departmentId": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "firstName": {
                    "type": "string",
                    "example": "Ivan"
                },
                "lastName": {
                    "type": "string",
                    "example": "Petrov"
                },
                "middleName": {
                    "type": "string",
                    "example": "Sergeevich"
                },
                "pictureUrl": {
                    "type": "string",
                    "example": "/images/users/ivan.jpg"
                },
                "roleId": {
                    "type": "integer",
                    "example": 1
                },
                "suspended": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "api.Permission": {
            "type": "object",
            "required": [
                "description",
                "id",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Создание и заполнение листа достижений"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "draft_achievement_list"
                }
            }
        },
        "api.PermissionsResponse": {
            "type": "object",
            "required": [
                "permissions"
            ],
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Permission"
                    }
                }
            }
        },
        "api.Role": {
            "type": "object",
            "required": [
                "id",
                "name",
                "permissions"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Преподаватель"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Permission"
                    }
                }
            }
        },
        "api.RolesResponse": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Role"
                    }
                }
            }
        },
        "api.ServerError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "SERVER_ERROR"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Internal server error"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Внутренняя ошибка сервера"
                }
            }
        },
        "api.TokenResponse": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "api.UnauthorizedError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "UNAUTHORIZED"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Unauthorized access"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Неавторизованный доступ"
                }
            }
        },
        "api.UpdateDepartmentRequest": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Math department"
                },
                "name": {
                    "type": "string",
                    "example": "Mathematics"
                }
            }
        },
        "api.UserExistsError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "USER_EXISTS"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "User with this username already exists"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Пользователь с таким именем уже существует"
                }
            }
        },
        "api.UserNotFoundError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "USER_NOT_FOUND"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "User does not exist"
                },
                "ruMessage": {
                    "type": "string",
                    "example": "Пользователь не существует"
                }
            }
        },
        "api.UserResponse": {
            "type": "object",
            "required": [
                "firstName",
                "id",
                "lastName",
                "pictureUrl",
                "role",
                "suspended"
            ],
            "properties": {
                "department": {
                    "$ref": "#/definitions/api.Department"
                },
                "firstName": {
                    "type": "string",
                    "example": "Ivan"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "lastName": {
                    "type": "string",
                    "example": "Petrov"
                },
                "middleName": {
                    "type": "string",
                    "example": "Sergeevich"
                },
                "pictureUrl": {
                    "type": "string",
                    "example": "/images/users/ivan.jpg"
                },
                "role": {
                    "$ref": "#/definitions/api.Role"
                },
                "suspended": {
                    "type": "boolean"
                }
            }
        },
        "api.UsersResponse": {
            "type": "object",
            "required": [
                "users"
            ],
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.UserResponse"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
