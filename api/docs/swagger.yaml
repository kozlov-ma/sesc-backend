definitions:
  api.APIError:
    properties:
      code:
        example: INVALID_REQUEST
        type: string
      details:
        example: field X is required
        type: string
      message:
        example: Invalid request body
        type: string
      ruMessage:
        example: Некорректный формат запроса
        type: string
    required:
    - code
    - message
    - ruMessage
    type: object
  api.CreateDepartmentRequest:
    properties:
      description:
        example: Math department
        type: string
      name:
        example: Mathematics
        type: string
    required:
    - description
    - name
    type: object
  api.CreateDepartmentResponse:
    properties:
      description:
        example: Math department
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: Mathematics
        type: string
    required:
    - description
    - id
    - name
    type: object
  api.CreateUserRequest:
    properties:
      firstName:
        example: Anna
        type: string
      lastName:
        example: Smirnova
        type: string
      middleName:
        example: Olegovna
        type: string
      pictureUrl:
        example: /images/users/anna.jpg
        type: string
      roleId:
        example: 2
        type: integer
    required:
    - firstName
    - lastName
    - roleId
    type: object
  api.Department:
    properties:
      description:
        example: Math department
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: Mathematics
        type: string
    required:
    - description
    - id
    - name
    type: object
  api.DepartmentsResponse:
    properties:
      departments:
        items:
          $ref: '#/definitions/api.Department'
        type: array
    required:
    - departments
    type: object
  api.PatchUserRequest:
    properties:
      departmentId:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      firstName:
        example: Ivan
        type: string
      lastName:
        example: Petrov
        type: string
      middleName:
        example: Sergeevich
        type: string
      pictureUrl:
        example: /images/users/ivan.jpg
        type: string
      roleId:
        example: 1
        type: integer
      suspended:
        example: false
        type: boolean
    required:
    - firstName
    - lastName
    - roleId
    - suspended
    type: object
  api.Permission:
    properties:
      description:
        example: Создание и заполнение листа достижений
        type: string
      id:
        example: 1
        type: integer
      name:
        example: draft_achievement_list
        type: string
    required:
    - description
    - id
    - name
    type: object
  api.PermissionsResponse:
    properties:
      permissions:
        items:
          $ref: '#/definitions/api.Permission'
        type: array
    required:
    - permissions
    type: object
  api.Role:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Преподаватель
        type: string
      permissions:
        items:
          $ref: '#/definitions/api.Permission'
        type: array
    required:
    - id
    - name
    - permissions
    type: object
  api.RolesResponse:
    properties:
      roles:
        items:
          $ref: '#/definitions/api.Role'
        type: array
    type: object
  api.UpdateDepartmentRequest:
    properties:
      description:
        example: Math department
        type: string
      name:
        example: Mathematics
        type: string
    required:
    - description
    - name
    type: object
  api.UpdateDepartmentResponse:
    properties:
      description:
        example: Math department
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: Mathematics
        type: string
    required:
    - description
    - id
    - name
    type: object
  api.UserResponse:
    properties:
      department:
        $ref: '#/definitions/api.Department'
      firstName:
        example: Ivan
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      lastName:
        example: Petrov
        type: string
      middleName:
        example: Sergeevich
        type: string
      pictureUrl:
        example: /images/users/ivan.jpg
        type: string
      role:
        $ref: '#/definitions/api.Role'
      suspended:
        type: boolean
    required:
    - firstName
    - id
    - lastName
    - pictureUrl
    - role
    - suspended
    type: object
  api.UsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/api.UserResponse'
        type: array
    required:
    - users
    type: object
info:
  contact: {}
paths:
  /departments:
    get:
      description: Retrieves list of all registered departments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.DepartmentsResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: List all departments
      tags:
      - departments
    post:
      consumes:
      - application/json
      description: Creates a new department with provided name and description
      parameters:
      - description: Department creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateDepartmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.CreateDepartmentResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/api.APIError'
        "409":
          description: Department with this name already exists
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Create new department
      tags:
      - departments
  /departments/{id}:
    delete:
      description: Removes the department by ID
      parameters:
      - description: Department UUID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid department ID
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: Department not found
          schema:
            $ref: '#/definitions/api.APIError'
        "409":
          description: Cannot remove department, it still has some users
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Delete department
      tags:
      - departments
    put:
      consumes:
      - application/json
      description: Updates the department's name and description by ID
      parameters:
      - description: Department UUID
        in: path
        name: id
        required: true
        type: string
      - description: Department update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateDepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UpdateDepartmentResponse'
        "400":
          description: Invalid department ID or request format
          schema:
            $ref: '#/definitions/api.APIError'
        "409":
          description: Department with this name already exists
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Update department
      tags:
      - departments
  /permissions:
    get:
      description: Retrieves all available system permissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PermissionsResponse'
      summary: List all permissions
      tags:
      - permissions
  /roles:
    get:
      description: Retrieves all system roles with their permissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RolesResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: List all roles
      tags:
      - roles
  /users:
    get:
      description: Retrieves detailed information about all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UsersResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Get all users registered in the system
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user with specified role (non-teacher)
      parameters:
      - description: User details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.UserResponse'
        "400":
          description: Invalid role or request format
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Create new user
      tags:
      - users
  /users/{id}:
    get:
      description: Retrieves detailed information about a user
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserResponse'
        "400":
          description: Invalid UUID format
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Get user details
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Applies a partial update to the user identified by {id}. Only non-nil
        fields in the request are applied.
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: User fields to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.PatchUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserResponse'
        "400":
          description: Invalid request format or invalid field value
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Partially update user
      tags:
      - users
swagger: "2.0"
