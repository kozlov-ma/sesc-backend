definitions:
  api.AdminLoginRequest:
    properties:
      token:
        example: admin-secret-token
        type: string
    required:
    - token
    type: object
  api.CreateDepartmentRequest:
    properties:
      description:
        example: Math department
        type: string
      name:
        example: Mathematics
        type: string
    required:
    - description
    - name
    type: object
  api.CreateUserRequest:
    properties:
      departmentId:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      firstName:
        example: Anna
        type: string
      lastName:
        example: Smirnova
        type: string
      middleName:
        example: Olegovna
        type: string
      pictureUrl:
        example: /images/users/ivan.jpg
        type: string
      roleId:
        example: 2
        type: integer
    required:
    - firstName
    - lastName
    - roleId
    type: object
  api.CredentialsRequest:
    properties:
      password:
        example: secret123
        type: string
      username:
        example: johndoe
        type: string
    required:
    - password
    - username
    type: object
  api.Department:
    properties:
      description:
        example: Math department
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: Mathematics
        type: string
    required:
    - description
    - id
    - name
    type: object
  api.DepartmentsResponse:
    properties:
      departments:
        items:
          $ref: '#/definitions/api.Department'
        type: array
    required:
    - departments
    type: object
  api.Error:
    properties:
      code:
        example: INVALID_REQUEST
        type: string
      details:
        example: field X is required
        type: string
      message:
        example: Invalid request body
        type: string
      ruMessage:
        example: Некорректный формат запроса
        type: string
    required:
    - code
    - message
    - ruMessage
    type: object
  api.IdentityResponse:
    properties:
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      role:
        example: user
        type: string
    required:
    - id
    - role
    type: object
  api.PatchUserRequest:
    properties:
      departmentId:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      firstName:
        example: Ivan
        type: string
      lastName:
        example: Petrov
        type: string
      middleName:
        example: Sergeevich
        type: string
      pictureUrl:
        example: /images/users/ivan.jpg
        type: string
      roleId:
        example: 1
        type: integer
      suspended:
        example: false
        type: boolean
    required:
    - firstName
    - lastName
    - roleId
    - suspended
    type: object
  api.Permission:
    properties:
      description:
        example: Создание и заполнение листа достижений
        type: string
      id:
        example: 1
        type: integer
      name:
        example: draft_achievement_list
        type: string
    required:
    - description
    - id
    - name
    type: object
  api.PermissionsResponse:
    properties:
      permissions:
        items:
          $ref: '#/definitions/api.Permission'
        type: array
    required:
    - permissions
    type: object
  api.Role:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Преподаватель
        type: string
      permissions:
        items:
          $ref: '#/definitions/api.Permission'
        type: array
    required:
    - id
    - name
    - permissions
    type: object
  api.RolesResponse:
    properties:
      roles:
        items:
          $ref: '#/definitions/api.Role'
        type: array
    type: object
  api.TokenResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - token
    type: object
  api.UpdateDepartmentRequest:
    properties:
      description:
        example: Math department
        type: string
      name:
        example: Mathematics
        type: string
    required:
    - description
    - name
    type: object
  api.UserResponse:
    properties:
      department:
        $ref: '#/definitions/api.Department'
      firstName:
        example: Ivan
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      lastName:
        example: Petrov
        type: string
      middleName:
        example: Sergeevich
        type: string
      pictureUrl:
        example: /images/users/ivan.jpg
        type: string
      role:
        $ref: '#/definitions/api.Role'
      suspended:
        type: boolean
    required:
    - firstName
    - id
    - lastName
    - pictureUrl
    - role
    - suspended
    type: object
  api.UsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/api.UserResponse'
        type: array
    required:
    - users
    type: object
info:
  contact: {}
paths:
  /auth/admin/login:
    post:
      consumes:
      - application/json
      description: Verifies admin token and returns a JWT token with admin privileges
      parameters:
      - description: Admin token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.AdminLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TokenResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Invalid admin token
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Admin login
      tags:
      - authentication
  /auth/credentials/{id}:
    delete:
      description: Deletes credentials for a user
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No content
        "400":
          description: Invalid UUID format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden - admin role required
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: User not found or does not exist
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Delete user credentials
      tags:
      - authentication
    get:
      description: Retrieves credentials for a user
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.CredentialsRequest'
        "400":
          description: Invalid UUID format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden - admin role required
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: User not found or does not exist
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Get user credentials
      tags:
      - authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Verifies user credentials and returns a JWT token
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CredentialsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TokenResponse'
        "400":
          description: Invalid credentials format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      summary: User login
      tags:
      - authentication
  /auth/validate:
    get:
      description: Validates a JWT token and returns the identity information
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.IdentityResponse'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Validate JWT token
      tags:
      - authentication
  /departments:
    get:
      description: Retrieves list of all registered departments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.DepartmentsResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List all departments
      tags:
      - departments
    post:
      consumes:
      - application/json
      description: Creates a new department with the given details
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      - description: Department details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateDepartmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Department'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden - admin role required
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Create a new department
      tags:
      - departments
  /departments/{id}:
    delete:
      description: Deletes a department by its ID
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      - description: Department UUID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No content
        "400":
          description: Invalid UUID format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden - admin role required
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Department not found
          schema:
            $ref: '#/definitions/api.Error'
        "409":
          description: Cannot remove department, it still has some users
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Delete a department
      tags:
      - departments
    put:
      consumes:
      - application/json
      description: Updates an existing department with new details
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      - description: Department UUID
        in: path
        name: id
        required: true
        type: string
      - description: Updated department details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateDepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Department'
        "400":
          description: Invalid UUID format or request format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden - admin role required
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Department not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Update department details
      tags:
      - departments
  /permissions:
    get:
      description: Retrieves all available system permissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PermissionsResponse'
      summary: List all permissions
      tags:
      - permissions
  /roles:
    get:
      description: Retrieves all system roles with their permissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RolesResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List all roles
      tags:
      - roles
  /users:
    get:
      description: Retrieves detailed information about all users
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UsersResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Get all users registered in the system
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user with specified role (non-teacher)
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      - description: User details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.UserResponse'
        "400":
          description: Invalid role or request format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden - admin role required
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Create new user
      tags:
      - users
  /users/{id}:
    get:
      description: Retrieves detailed information about a user
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserResponse'
        "400":
          description: Invalid UUID format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Applies a partial update to the user identified by {id}. Only non-nil
        fields in the request are applied.
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: User fields to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.PatchUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserResponse'
        "400":
          description: Invalid UUID format, role or request format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden - admin role required
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Partially update user
      tags:
      - users
  /users/{id}/credentials:
    put:
      consumes:
      - application/json
      description: Assigns username/password credentials to an existing user
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CredentialsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: AuthID
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid credentials or request format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden - admin role required
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: User does not exist
          schema:
            $ref: '#/definitions/api.Error'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Register user credentials
      tags:
      - authentication
  /users/me:
    get:
      description: Returns information about the current authenticated user
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserResponse'
        "401":
          description: Unauthorized or invalid token
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - BearerAuth: []
      summary: Get current user information
      tags:
      - users
swagger: "2.0"
