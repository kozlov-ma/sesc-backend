// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kozlov-ma/sesc-backend/sesc (interfaces: IAM)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_iam.go . IAM
//

// Package mock_sesc is a generated GoMock package.
package mock_sesc

import (
	context "context"
	reflect "reflect"

	auth "github.com/kozlov-ma/sesc-backend/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockIAM is a mock of IAM interface.
type MockIAM struct {
	ctrl     *gomock.Controller
	recorder *MockIAMMockRecorder
	isgomock struct{}
}

// MockIAMMockRecorder is the mock recorder for MockIAM.
type MockIAMMockRecorder struct {
	mock *MockIAM
}

// NewMockIAM creates a new mock instance.
func NewMockIAM(ctrl *gomock.Controller) *MockIAM {
	mock := &MockIAM{ctrl: ctrl}
	mock.recorder = &MockIAMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAM) EXPECT() *MockIAMMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockIAM) Register(arg0 context.Context, arg1 auth.Credentials) (auth.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(auth.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIAMMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIAM)(nil).Register), arg0, arg1)
}
