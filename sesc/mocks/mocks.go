// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kozlov-ma/sesc-backend/sesc (interfaces: DB)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mocks.go . DB
//

// Package mock_sesc is a generated GoMock package.
package mock_sesc

import (
	context "context"
	reflect "reflect"

	sesc "github.com/kozlov-ma/sesc-backend/sesc"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
	isgomock struct{}
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AssignHeadOfDepartment mocks base method.
func (m *MockDB) AssignHeadOfDepartment(ctx context.Context, departmentID, userID sesc.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignHeadOfDepartment", ctx, departmentID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignHeadOfDepartment indicates an expected call of AssignHeadOfDepartment.
func (mr *MockDBMockRecorder) AssignHeadOfDepartment(ctx, departmentID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignHeadOfDepartment", reflect.TypeOf((*MockDB)(nil).AssignHeadOfDepartment), ctx, departmentID, userID)
}

// CreateDepartment mocks base method.
func (m *MockDB) CreateDepartment(ctx context.Context, id sesc.UUID, name, description string) (sesc.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepartment", ctx, id, name, description)
	ret0, _ := ret[0].(sesc.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDepartment indicates an expected call of CreateDepartment.
func (mr *MockDBMockRecorder) CreateDepartment(ctx, id, name, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepartment", reflect.TypeOf((*MockDB)(nil).CreateDepartment), ctx, id, name, description)
}

// Departments mocks base method.
func (m *MockDB) Departments(ctx context.Context) ([]sesc.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Departments", ctx)
	ret0, _ := ret[0].([]sesc.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Departments indicates an expected call of Departments.
func (mr *MockDBMockRecorder) Departments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Departments", reflect.TypeOf((*MockDB)(nil).Departments), ctx)
}

// GrantExtraPermissions mocks base method.
func (m *MockDB) GrantExtraPermissions(arg0 context.Context, arg1 sesc.User, arg2 ...sesc.Permission) (sesc.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantExtraPermissions", varargs...)
	ret0, _ := ret[0].(sesc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantExtraPermissions indicates an expected call of GrantExtraPermissions.
func (mr *MockDBMockRecorder) GrantExtraPermissions(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantExtraPermissions", reflect.TypeOf((*MockDB)(nil).GrantExtraPermissions), varargs...)
}

// InsertDefaultPermissions mocks base method.
func (m *MockDB) InsertDefaultPermissions(ctx context.Context, permissions []sesc.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDefaultPermissions", ctx, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDefaultPermissions indicates an expected call of InsertDefaultPermissions.
func (mr *MockDBMockRecorder) InsertDefaultPermissions(ctx, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDefaultPermissions", reflect.TypeOf((*MockDB)(nil).InsertDefaultPermissions), ctx, permissions)
}

// InsertDefaultRoles mocks base method.
func (m *MockDB) InsertDefaultRoles(ctx context.Context, roles []sesc.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDefaultRoles", ctx, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDefaultRoles indicates an expected call of InsertDefaultRoles.
func (mr *MockDBMockRecorder) InsertDefaultRoles(ctx, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDefaultRoles", reflect.TypeOf((*MockDB)(nil).InsertDefaultRoles), ctx, roles)
}

// RevokeExtraPermissions mocks base method.
func (m *MockDB) RevokeExtraPermissions(arg0 context.Context, arg1 sesc.User, arg2 ...sesc.Permission) (sesc.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeExtraPermissions", varargs...)
	ret0, _ := ret[0].(sesc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeExtraPermissions indicates an expected call of RevokeExtraPermissions.
func (mr *MockDBMockRecorder) RevokeExtraPermissions(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeExtraPermissions", reflect.TypeOf((*MockDB)(nil).RevokeExtraPermissions), varargs...)
}

// SaveUser mocks base method.
func (m *MockDB) SaveUser(arg0 context.Context, arg1 sesc.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockDBMockRecorder) SaveUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockDB)(nil).SaveUser), arg0, arg1)
}

// UserByID mocks base method.
func (m *MockDB) UserByID(arg0 context.Context, arg1 sesc.UUID) (sesc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByID", arg0, arg1)
	ret0, _ := ret[0].(sesc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByID indicates an expected call of UserByID.
func (mr *MockDBMockRecorder) UserByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByID", reflect.TypeOf((*MockDB)(nil).UserByID), arg0, arg1)
}
